{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "94e399de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "73ffe24c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Analytics.ipynb             customers_sample.csv\r\n",
      "Homework 1 description.pdf  merchant codes list.xls\r\n",
      "Useful liks for HW1.docx    transactional_data.csv\r\n"
     ]
    }
   ],
   "source": [
    "ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "504acc26",
   "metadata": {},
   "outputs": [],
   "source": [
    "cust = pd.read_csv('customers_sample.csv',sep=';',low_memory=False)\n",
    "trans = pd.read_csv('transactional_data.csv')\n",
    "codes = pd.read_excel('merchant codes list.xls')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "455195f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid1</th>\n",
       "      <th>customer_age</th>\n",
       "      <th>country</th>\n",
       "      <th>city_of_living</th>\n",
       "      <th>registration_dt</th>\n",
       "      <th>website_last_visit_date</th>\n",
       "      <th>email</th>\n",
       "      <th>has_mob_app</th>\n",
       "      <th>phone_number</th>\n",
       "      <th>push</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8388.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Kazan</td>\n",
       "      <td>18.02.2017</td>\n",
       "      <td>01.05.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17264.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Sevastopol</td>\n",
       "      <td>21.07.2020</td>\n",
       "      <td>03.10.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17373.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Kazan</td>\n",
       "      <td>26.02.2016</td>\n",
       "      <td>24.12.2018</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26297.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Sevastopol</td>\n",
       "      <td>25.01.2018</td>\n",
       "      <td>16.04.2018</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27044.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Sevastopol</td>\n",
       "      <td>17.07.2015</td>\n",
       "      <td>30.07.2016</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      uid1  customer_age country city_of_living registration_dt  \\\n",
       "0   8388.0          46.0  RUSSIA          Kazan      18.02.2017   \n",
       "1  17264.0          20.0  RUSSIA     Sevastopol      21.07.2020   \n",
       "2  17373.0          31.0  RUSSIA          Kazan      26.02.2016   \n",
       "3  26297.0          27.0  RUSSIA     Sevastopol      25.01.2018   \n",
       "4  27044.0          41.0  RUSSIA     Sevastopol      17.07.2015   \n",
       "\n",
       "  website_last_visit_date  email  has_mob_app  phone_number  push  \n",
       "0              01.05.2019    0.0          0.0           1.0   0.0  \n",
       "1              03.10.2021    0.0          0.0           1.0   0.0  \n",
       "2              24.12.2018    0.0          1.0           1.0   0.0  \n",
       "3              16.04.2018    0.0          1.0           1.0   1.0  \n",
       "4              30.07.2016    0.0          0.0           0.0   0.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fa5034aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid1</th>\n",
       "      <th>date_pur</th>\n",
       "      <th>mcc_id</th>\n",
       "      <th>transaction_amt</th>\n",
       "      <th>transaction_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14164181</td>\n",
       "      <td>10/09/2020</td>\n",
       "      <td>5499</td>\n",
       "      <td>418.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15453249</td>\n",
       "      <td>10/08/2020</td>\n",
       "      <td>5541</td>\n",
       "      <td>1034.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41571339</td>\n",
       "      <td>12/09/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>57.98</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2044223</td>\n",
       "      <td>28/06/2021</td>\n",
       "      <td>5921</td>\n",
       "      <td>549.40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33493259</td>\n",
       "      <td>20/07/2020</td>\n",
       "      <td>4121</td>\n",
       "      <td>578.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       uid1    date_pur  mcc_id  transaction_amt  transaction_qty\n",
       "0  14164181  10/09/2020    5499           418.00                1\n",
       "1  15453249  10/08/2020    5541          1034.00                1\n",
       "2  41571339  12/09/2020    5411            57.98                1\n",
       "3   2044223  28/06/2021    5921           549.40                4\n",
       "4  33493259  20/07/2020    4121           578.00                2"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6694f600",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STANDARD MERCHANT CATEGORY CODES\\n**Please do not sort this spreadsheet**</th>\n",
       "      <th>Unnamed: 1</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MCC CODE</td>\n",
       "      <td>Program Type:</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0742</td>\n",
       "      <td>Veterinary Services</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0763</td>\n",
       "      <td>Agricultural Cooperatives</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0780</td>\n",
       "      <td>Landscaping and Horticultural Services</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1520</td>\n",
       "      <td>General Contractor/Residential Building</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  STANDARD MERCHANT CATEGORY CODES\\n**Please do not sort this spreadsheet**  \\\n",
       "0                                           MCC CODE                          \n",
       "1                                               0742                          \n",
       "2                                               0763                          \n",
       "3                                               0780                          \n",
       "4                                               1520                          \n",
       "\n",
       "                                Unnamed: 1 Unnamed: 2  \n",
       "0                            Program Type:        NaN  \n",
       "1                      Veterinary Services        NaN  \n",
       "2                Agricultural Cooperatives        NaN  \n",
       "3   Landscaping and Horticultural Services        NaN  \n",
       "4  General Contractor/Residential Building        NaN  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "082c930f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uid1                       1038575\n",
       "customer_age               1038586\n",
       "country                    1038575\n",
       "city_of_living             1038575\n",
       "registration_dt            1038664\n",
       "website_last_visit_date    1038800\n",
       "email                      1038575\n",
       "has_mob_app                1038575\n",
       "phone_number               1038575\n",
       "push                       1038575\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9a4089c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575, 10)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6d2c73fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uid1               0\n",
       "date_pur           0\n",
       "mcc_id             0\n",
       "transaction_amt    0\n",
       "transaction_qty    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "27543aec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "STANDARD MERCHANT CATEGORY CODES\\n**Please do not sort this spreadsheet**      1\n",
       "Unnamed: 1                                                                     0\n",
       "Unnamed: 2                                                                   867\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codes.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7960f678",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(882, 3)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codes.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b649c0f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "codes = codes.rename(columns={'STANDARD MERCHANT CATEGORY CODES\\n**Please do not sort this spreadsheet**':'mcc_id',\n",
    "                             'Unnamed: 1':'program_type'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "637eadcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "codes = codes.iloc[1:,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "787e0e78",
   "metadata": {},
   "outputs": [],
   "source": [
    "codes = codes.iloc[:,0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "046df5b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "codes = codes.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "727ae108",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mcc_id</th>\n",
       "      <th>program_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0742</td>\n",
       "      <td>Veterinary Services</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0763</td>\n",
       "      <td>Agricultural Cooperatives</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0780</td>\n",
       "      <td>Landscaping and Horticultural Services</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1520</td>\n",
       "      <td>General Contractor/Residential Building</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1711</td>\n",
       "      <td>Heating, Plumbing, Air Conditioning Contractors</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  mcc_id                                     program_type\n",
       "0   0742                              Veterinary Services\n",
       "1   0763                        Agricultural Cooperatives\n",
       "2   0780           Landscaping and Horticultural Services\n",
       "3   1520          General Contractor/Residential Building\n",
       "4   1711  Heating, Plumbing, Air Conditioning Contractors"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7726e89b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid1</th>\n",
       "      <th>date_pur</th>\n",
       "      <th>mcc_id</th>\n",
       "      <th>transaction_amt</th>\n",
       "      <th>transaction_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14164181</td>\n",
       "      <td>10/09/2020</td>\n",
       "      <td>5499</td>\n",
       "      <td>418.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15453249</td>\n",
       "      <td>10/08/2020</td>\n",
       "      <td>5541</td>\n",
       "      <td>1034.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41571339</td>\n",
       "      <td>12/09/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>57.98</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2044223</td>\n",
       "      <td>28/06/2021</td>\n",
       "      <td>5921</td>\n",
       "      <td>549.40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33493259</td>\n",
       "      <td>20/07/2020</td>\n",
       "      <td>4121</td>\n",
       "      <td>578.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       uid1    date_pur  mcc_id  transaction_amt  transaction_qty\n",
       "0  14164181  10/09/2020    5499           418.00                1\n",
       "1  15453249  10/08/2020    5541          1034.00                1\n",
       "2  41571339  12/09/2020    5411            57.98                1\n",
       "3   2044223  28/06/2021    5921           549.40                4\n",
       "4  33493259  20/07/2020    4121           578.00                2"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans.head()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "95d84705",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(trans,codes,on='mcc_id',how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "49a84704",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid1</th>\n",
       "      <th>date_pur</th>\n",
       "      <th>mcc_id</th>\n",
       "      <th>transaction_amt</th>\n",
       "      <th>transaction_qty</th>\n",
       "      <th>program_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14164181</td>\n",
       "      <td>10/09/2020</td>\n",
       "      <td>5499</td>\n",
       "      <td>418.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15453249</td>\n",
       "      <td>10/08/2020</td>\n",
       "      <td>5541</td>\n",
       "      <td>1034.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Service Stations (with or without Ancillary Se...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41571339</td>\n",
       "      <td>12/09/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>57.98</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2044223</td>\n",
       "      <td>28/06/2021</td>\n",
       "      <td>5921</td>\n",
       "      <td>549.40</td>\n",
       "      <td>4</td>\n",
       "      <td>Package Stores--Beer, Wine, and Liquor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33493259</td>\n",
       "      <td>20/07/2020</td>\n",
       "      <td>4121</td>\n",
       "      <td>578.00</td>\n",
       "      <td>2</td>\n",
       "      <td>Taxicabs and Limousines</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       uid1    date_pur mcc_id  transaction_amt  transaction_qty  \\\n",
       "0  14164181  10/09/2020   5499           418.00                1   \n",
       "1  15453249  10/08/2020   5541          1034.00                1   \n",
       "2  41571339  12/09/2020   5411            57.98                1   \n",
       "3   2044223  28/06/2021   5921           549.40                4   \n",
       "4  33493259  20/07/2020   4121           578.00                2   \n",
       "\n",
       "                                        program_type  \n",
       "0  Miscellaneous Food Stores-Convenience Stores a...  \n",
       "1  Service Stations (with or without Ancillary Se...  \n",
       "2                    Grocery Stores and Supermarkets  \n",
       "3             Package Stores--Beer, Wine, and Liquor  \n",
       "4                            Taxicabs and Limousines  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "32b39628",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uid1                  0\n",
       "date_pur              0\n",
       "mcc_id                0\n",
       "transaction_amt       0\n",
       "transaction_qty       0\n",
       "program_type       1030\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5697a69d",
   "metadata": {},
   "outputs": [],
   "source": [
    "cust = cust.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b419e29b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9675, 10)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a0fd9a31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='has_mob_app', ylabel='count'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=cust['has_mob_app'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d8633d53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='phone_number', ylabel='count'>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=cust['phone_number'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d420db10",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='country', ylabel='count'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEHCAYAAACEKcAKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAS00lEQVR4nO3df5Cd1X3f8ffHksH4h2pkFgISsWirJgYmNmGH4LiTIaGu1daJaGpseUJQHDJKKY3tpHEKbabutKMZT+PENU7MRI0BibpQBTtFzlRNqWwn4wSjLoEUC4WiCQQUybBAamOPrUTKt3/cs+FaWolFZ/de1vt+zdy5z/N9zjl7nj/Eh+fnTVUhSdLJetm4JyBJWtwMEklSF4NEktTFIJEkdTFIJEldDBJJUpflCzVwkpuBtwNPVdWFrbYS+K/AGuAx4J1V9edt2w3ANcAR4L1V9TutfjFwK3Aa8N+B91VVJTkV2AZcDDwDvKuqHnuheZ1xxhm1Zs2a+dpNSVoS7rvvvqeramK2bVmo50iS/ADwNWDbUJD8B+DZqvpQkuuB06vqXyY5H7gduAQ4B/hfwN+pqiNJdgPvA77IIEhurKqdSf4Z8D1V9U+TbAD+cVW964XmNTk5WVNTUwuwx5L07SvJfVU1Odu2BTu1VVW/Bzx7VHk9sLUtbwWuGKrfUVWHqupRYB9wSZKzgRVVdU8NEm/bUX1mxroTuDxJFmJfJEnHN+prJGdV1UGA9n1mq68Cnhhqt7/VVrXlo+vf0qeqDgNfAV63YDOXJM3qpXKxfbYjiTpB/UR9jh082ZRkKsnU9PT0SU5RkjSbUQfJk+10Fe37qVbfD5w71G41cKDVV89S/5Y+SZYDf4NjT6UBUFVbqmqyqiYnJma9ViRJOkmjDpIdwMa2vBG4a6i+IcmpSc4D1gK72+mv55Jc2q5/XH1Un5mx3gF8tnwDpSSN3ELe/ns7cBlwRpL9wAeBDwHbk1wDPA5cCVBVe5JsBx4CDgPXVdWRNtS1PH/77872AfgEcFuSfQyORDYs1L5Iko5vwW7/fany9l9JevHGcvuvJGlpMEgkSV0W7BqJTuziD2wb9xQkLQL3/dLV457CC/KIRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV3GEiRJfjbJniRfSnJ7klckWZnk7iSPtO/Th9rfkGRfkoeTvG2ofnGSB9u2G5NkHPsjSUvZyIMkySrgvcBkVV0ILAM2ANcDu6pqLbCrrZPk/Lb9AmAd8PEky9pwNwGbgLXts26EuyJJYnyntpYDpyVZDrwSOACsB7a27VuBK9ryeuCOqjpUVY8C+4BLkpwNrKiqe6qqgG1DfSRJIzLyIKmqPwM+DDwOHAS+UlX/Ezirqg62NgeBM1uXVcATQ0Psb7VVbfnouiRphMZxaut0BkcZ5wHnAK9KctWJusxSqxPUZ/ubm5JMJZmanp5+sVOWJJ3AOE5t/T3g0aqarqq/BD4NfD/wZDtdRft+qrXfD5w71H81g1Nh+9vy0fVjVNWWqpqsqsmJiYl53RlJWurGESSPA5cmeWW7y+pyYC+wA9jY2mwE7mrLO4ANSU5Nch6Di+q72+mv55Jc2sa5eqiPJGlElo/6D1bVvUnuBP4QOAzcD2wBXg1sT3INg7C5srXfk2Q78FBrf11VHWnDXQvcCpwG7GwfSdIIjTxIAKrqg8AHjyofYnB0Mlv7zcDmWepTwIXzPkFJ0pz5ZLskqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSeoyliBJ8tokdyb54yR7k7w5ycokdyd5pH2fPtT+hiT7kjyc5G1D9YuTPNi23Zgk49gfSVrKxnVE8lHgf1TVdwNvBPYC1wO7qmotsKutk+R8YANwAbAO+HiSZW2cm4BNwNr2WTfKnZAkjSFIkqwAfgD4BEBV/UVV/T9gPbC1NdsKXNGW1wN3VNWhqnoU2AdckuRsYEVV3VNVBWwb6iNJGpFxHJH8TWAauCXJ/Ul+I8mrgLOq6iBA+z6ztV8FPDHUf3+rrWrLR9ePkWRTkqkkU9PT0/O7N5K0xI0jSJYD3wvcVFUXAV+nncY6jtmue9QJ6scWq7ZU1WRVTU5MTLzY+UqSTmAcQbIf2F9V97b1OxkEy5PtdBXt+6mh9ucO9V8NHGj11bPUJUkjNPIgqaovA08k+a5Wuhx4CNgBbGy1jcBdbXkHsCHJqUnOY3BRfXc7/fVckkvb3VpXD/WRJI3I8jH93Z8BPpnkFOBPgPcwCLXtSa4BHgeuBKiqPUm2Mwibw8B1VXWkjXMtcCtwGrCzfSRJIzSWIKmqB4DJWTZdfpz2m4HNs9SngAvndXKSpBfFJ9slSV0MEklSF4NEktRlTkGSZNdcapKkpeeEF9uTvAJ4JXBGe4nizEOAK4BzFnhukqRF4IXu2vpp4P0MQuM+ng+SrwK/tnDTkiQtFicMkqr6KPDRJD9TVR8b0ZwkSYvInJ4jqaqPJfl+YM1wn6ratkDzkiQtEnMKkiS3AX8LeACYeap85tXtkqQlbK5Ptk8C57ff/ZAk6a/N9TmSLwHfsZATkSQtTnM9IjkDeCjJbuDQTLGqfmRBZiVJWjTmGiT/diEnIUlavOZ619bvLvREJEmL01zv2nqO53/G9hTg5cDXq2rFQk1MkrQ4zPWI5DXD60muAC5ZiAlJkhaXk3r7b1X9N+CH5ncqkqTFaK6ntn50aPVlDJ4r8ZkSSdKc79r64aHlw8BjwPp5n40kadGZ6zWS9yz0RCRJi9Ncf9hqdZLfSvJUkieTfCrJ6oWenCTppW+uF9tvAXYw+F2SVcBnWk2StMTNNUgmquqWqjrcPrcCEws4L0nSIjHXIHk6yVVJlrXPVcAzCzkxSdLiMNcg+UngncCXgYPAOwAvwEuS5nz7778HNlbVnwMkWQl8mEHASJKWsLkekXzPTIgAVNWzwEULMyVJ0mIy1yB5WZLTZ1baEclcj2YkSd/G5hoGvwz8QZI7Gbwa5Z3A5gWblSRp0Zjrk+3bkkwxeFFjgB+tqocWdGaSpEVhzqenWnAYHpKkb3FSr5GXJGmGQSJJ6mKQSJK6jC1I2qtW7k/y2219ZZK7kzzSvodvN74hyb4kDyd521D94iQPtm03Jsk49kWSlrJxHpG8D9g7tH49sKuq1gK72jpJzgc2ABcA64CPJ1nW+twEbALWts+60UxdkjRjLEHSfsvkHwG/MVReD2xty1uBK4bqd1TVoap6FNgHXJLkbGBFVd1TVQVsG+ojSRqRcR2R/EfgF4C/GqqdVVUHAdr3ma2+CnhiqN3+VlvVlo+uHyPJpiRTSaamp6fnZQckSQMjD5Ikbweeqqr75tplllqdoH5ssWpLVU1W1eTEhD+jIknzaRzvy3oL8CNJ/iHwCmBFkv8MPJnk7Ko62E5bPdXa7wfOHeq/GjjQ6qtnqUuSRmjkRyRVdUNVra6qNQwuon+2qq5i8FO+G1uzjcBdbXkHsCHJqUnOY3BRfXc7/fVckkvb3VpXD/WRJI3IS+kNvh8Ctie5BngcuBKgqvYk2c7g9SyHgeuq6kjrcy1wK3AasLN9JEkjNNYgqarPA59vy88Alx+n3WZmedtwVU0BFy7cDCVJL8Qn2yVJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldDBJJUheDRJLUxSCRJHUxSCRJXQwSSVIXg0SS1MUgkSR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEldRh4kSc5N8rkke5PsSfK+Vl+Z5O4kj7Tv04f63JBkX5KHk7xtqH5xkgfbthuTZNT7I0lL3TiOSA4D/6Kq3gBcClyX5HzgemBXVa0FdrV12rYNwAXAOuDjSZa1sW4CNgFr22fdKHdEkjSGIKmqg1X1h235OWAvsApYD2xtzbYCV7Tl9cAdVXWoqh4F9gGXJDkbWFFV91RVAduG+kiSRmSs10iSrAEuAu4FzqqqgzAIG+DM1mwV8MRQt/2ttqotH12XJI3Q2IIkyauBTwHvr6qvnqjpLLU6QX22v7UpyVSSqenp6Rc/WUnScY0lSJK8nEGIfLKqPt3KT7bTVbTvp1p9P3DuUPfVwIFWXz1L/RhVtaWqJqtqcmJiYv52RJI0lru2AnwC2FtVvzK0aQewsS1vBO4aqm9IcmqS8xhcVN/dTn89l+TSNubVQ30kSSOyfAx/8y3AjwMPJnmg1f4V8CFge5JrgMeBKwGqak+S7cBDDO74uq6qjrR+1wK3AqcBO9tHkjRCIw+SqvoCs1/fALj8OH02A5tnqU8BF87f7CRJL5ZPtkuSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC4GiSSpi0EiSepikEiSuhgkkqQuBokkqYtBIknqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSJK6GCSSpC6LPkiSrEvycJJ9Sa4f93wkaalZ1EGSZBnwa8A/AM4H3p3k/PHOSpKWlkUdJMAlwL6q+pOq+gvgDmD9mOckSUvKYg+SVcATQ+v7W02SNCLLxz2BTpmlVsc0SjYBm9rq15I8vKCzkk7OGcDT456EXlry4Y3jnsKM1x9vw2IPkv3AuUPrq4EDRzeqqi3AllFNSjoZSaaqanLc85BerMV+aut/A2uTnJfkFGADsGPMc5KkJWVRH5FU1eEk/xz4HWAZcHNV7RnztCRpSUnVMZcUJI1Bkk3tNKy0qBgkkqQui/0aiSRpzAwSaR4kOZLkgSRfSvKZJK9t9cuS/PZRbW9N8o62/PYk9yf5oyQPJfnpVv+uJJ9vY+5NsuUE492V5J6R7Kg0C4NEmh/fqKo3VdWFwLPAdS/UIcnLGdyW/sNV9UbgIuDzbfONwEfamG8APnacMV4LfC/w2iTnde+FdBIMEmn+3cPc3rDwGgZ3Tj4DUFWHqmrmYdmzGTwnRdv24HHG+CfAZxi8HmjDyU5Y6mGQSPOovUj0cubwPFNVPdva/WmS25P8WJKZf5MfAT6bZGeSn505VTaLdwO3t8+7u3dAOgkGiTQ/TkvyAIOji5XA3a1+vNsiC6CqfopB8OwGfh64udVvAd4A/CZwGfDFJKcOD5DkLOBvA1+oqv8LHE5y4fztkjQ3Bok0P75RVW9i8D6iU3j+GskzwOlHtV3J0Du1qurBqvoI8FYGp6pm6geq6uaqWg8cBo4OiXe1sR9N8hiwBk9vaQwMEmkeVdVXgPcCP98upj8CnJPkDQBJXg+8EXggyauTXDbU/U3An7Z261p/knwH8Drgz476c+8G1lXVmqpaA1yMQaIxWNSvSJFeiqrq/iR/BGyoqtuSXAXckuQVwF8CP1VVX0nyGuAXkvw68A3g68BPtGH+PvDRJN9s6x+oqi8n+W6AJGuA7wS+OPR3H03y1STfV1X3jmBXJcAn2yVJnTy1JUnqYpBIkroYJJKkLgaJJKmLQSJJ6mKQSC9xSd6f5JXjnod0PN7+K73EtafWJ6vq6Vm2LauqI6OflfQ8j0ikeZDk6iT/p/2uyG1JXp9kV6vtSvKdrd1f/xZJW/9a+76s/f7InUn+OMknM/Be4Bzgc0k+N9Mnyb9Lci/wi0l+a2i8tyb59Eh3XkueT7ZLnZJcAPxr4C1V9XSSlcBWYFtVbU3ykwx+X+SKFxjqIuAC4ADw+228G5P8HPCDQ0ckrwK+VFX/JkmAvUkmqmoaeA9wy3zvo3QiHpFI/X4IuHPmP/Tt9fBvBv5L234b8HfnMM7uqtpfVX8FPMDgJYyzOQJ8qv2tauNf1V41/2Zg50nthXSSPCKR+oXjvy5+xsz2w7T/gWtHE6cMtTk0tHyE4//7/OZR10VuYfDjVt8EfrOqDs9x3tK88IhE6rcLeGeS1wG0U1t/wPNv4v0x4Att+TEGb+kFWA+8fA7jP8fg1xRnVVUHGJwO+0Xg1hc3damfRyRSp6rak2Qz8LtJjgD3M3iV/M1JPgDMXLsA+E/AXUl2Mwigr8/hT2wBdiY5WFU/eJw2nwQmquqhnn2RToa3/0rfBpL8KnB/VX1i3HPR0mOQSItckvsYHNm8taoOvVB7ab4ZJJKkLl5slyR1MUgkSV0MEklSF4NEktTFIJEkdTFIJEld/j/SniKWGijmQwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=cust.country)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1f603734",
   "metadata": {},
   "outputs": [],
   "source": [
    "trans_per_program = data.groupby('program_type')['transaction_amt'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "795856c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "program_type\n",
       "Accounting, Auditing, and Bookkeeping Services        91724.92\n",
       "Advertising Services                                2062133.41\n",
       "AeroFlot                                            2203577.14\n",
       "Air Conditioning and Refrigeration Repair Shops         210.00\n",
       "Air France                                            90538.07\n",
       "Name: transaction_amt, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans_per_program.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e9e5c657",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uid1                       0\n",
       "customer_age               0\n",
       "country                    0\n",
       "city_of_living             0\n",
       "registration_dt            0\n",
       "website_last_visit_date    0\n",
       "email                      0\n",
       "has_mob_app                0\n",
       "phone_number               0\n",
       "push                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "974e88e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data2 = pd.merge(data,cust,on='uid1',how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "20e22ca4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid1</th>\n",
       "      <th>date_pur</th>\n",
       "      <th>mcc_id</th>\n",
       "      <th>transaction_amt</th>\n",
       "      <th>transaction_qty</th>\n",
       "      <th>program_type</th>\n",
       "      <th>customer_age</th>\n",
       "      <th>country</th>\n",
       "      <th>city_of_living</th>\n",
       "      <th>registration_dt</th>\n",
       "      <th>website_last_visit_date</th>\n",
       "      <th>email</th>\n",
       "      <th>has_mob_app</th>\n",
       "      <th>phone_number</th>\n",
       "      <th>push</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14164181</td>\n",
       "      <td>10/09/2020</td>\n",
       "      <td>5499</td>\n",
       "      <td>418.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>50.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Samara</td>\n",
       "      <td>05.12.2017</td>\n",
       "      <td>14.12.2019</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15453249</td>\n",
       "      <td>10/08/2020</td>\n",
       "      <td>5541</td>\n",
       "      <td>1034.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Service Stations (with or without Ancillary Se...</td>\n",
       "      <td>63.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Perm</td>\n",
       "      <td>07.11.2017</td>\n",
       "      <td>08.05.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41571339</td>\n",
       "      <td>12/09/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>57.98</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>22.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>13.11.2019</td>\n",
       "      <td>06.09.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2044223</td>\n",
       "      <td>28/06/2021</td>\n",
       "      <td>5921</td>\n",
       "      <td>549.40</td>\n",
       "      <td>4</td>\n",
       "      <td>Package Stores--Beer, Wine, and Liquor</td>\n",
       "      <td>33.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Voronezh</td>\n",
       "      <td>13.10.2018</td>\n",
       "      <td>08.05.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33493259</td>\n",
       "      <td>20/07/2020</td>\n",
       "      <td>4121</td>\n",
       "      <td>578.00</td>\n",
       "      <td>2</td>\n",
       "      <td>Taxicabs and Limousines</td>\n",
       "      <td>24.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Voronezh</td>\n",
       "      <td>30.09.2016</td>\n",
       "      <td>27.07.2018</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>41598283</td>\n",
       "      <td>03/07/2021</td>\n",
       "      <td>5411</td>\n",
       "      <td>175.63</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>62.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Kaliningrad</td>\n",
       "      <td>20.04.2016</td>\n",
       "      <td>10.10.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6379644</td>\n",
       "      <td>26/07/2020</td>\n",
       "      <td>5211</td>\n",
       "      <td>122.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Lumber &amp; Building Materials Stores</td>\n",
       "      <td>47.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>16.07.2020</td>\n",
       "      <td>05.02.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>19107233</td>\n",
       "      <td>15/06/2021</td>\n",
       "      <td>5411</td>\n",
       "      <td>842.23</td>\n",
       "      <td>2</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>42.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Ufa</td>\n",
       "      <td>21.01.2017</td>\n",
       "      <td>17.09.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>45462850</td>\n",
       "      <td>23/06/2021</td>\n",
       "      <td>5815</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>Digital Goods – Media, Books, Movies, Music</td>\n",
       "      <td>45.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Tomsk</td>\n",
       "      <td>17.12.2013</td>\n",
       "      <td>11.04.2015</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>13970717</td>\n",
       "      <td>22/09/2020</td>\n",
       "      <td>5541</td>\n",
       "      <td>1360.18</td>\n",
       "      <td>1</td>\n",
       "      <td>Service Stations (with or without Ancillary Se...</td>\n",
       "      <td>45.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Saint-Petersburg</td>\n",
       "      <td>26.08.2014</td>\n",
       "      <td>07.12.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>46277961</td>\n",
       "      <td>02/09/2021</td>\n",
       "      <td>5722</td>\n",
       "      <td>2642.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Household Appliance Stores</td>\n",
       "      <td>43.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Voronezh</td>\n",
       "      <td>22.01.2017</td>\n",
       "      <td>11.06.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>45428083</td>\n",
       "      <td>06/03/2021</td>\n",
       "      <td>5211</td>\n",
       "      <td>2966.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Lumber &amp; Building Materials Stores</td>\n",
       "      <td>35.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>04.10.2017</td>\n",
       "      <td>06.03.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>18211347</td>\n",
       "      <td>09/04/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>433.00</td>\n",
       "      <td>2</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>43.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>29.09.2016</td>\n",
       "      <td>03.03.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>23578498</td>\n",
       "      <td>16/04/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>79.90</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>60.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Krasnogorsk</td>\n",
       "      <td>07.07.2017</td>\n",
       "      <td>15.06.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>20701909</td>\n",
       "      <td>09/12/2020</td>\n",
       "      <td>5499</td>\n",
       "      <td>618.46</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>57.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>27.12.2016</td>\n",
       "      <td>30.12.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>37923687</td>\n",
       "      <td>22/01/2021</td>\n",
       "      <td>5411</td>\n",
       "      <td>-449.00</td>\n",
       "      <td>-2</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>31.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Samara</td>\n",
       "      <td>28.10.2017</td>\n",
       "      <td>20.11.2017</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>11080292</td>\n",
       "      <td>24/06/2021</td>\n",
       "      <td>5411</td>\n",
       "      <td>1626.98</td>\n",
       "      <td>2</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>37.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Vladivostok</td>\n",
       "      <td>25.10.2015</td>\n",
       "      <td>25.05.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>51166049</td>\n",
       "      <td>18/04/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>2045.33</td>\n",
       "      <td>3</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>47.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Pushkin</td>\n",
       "      <td>19.10.2019</td>\n",
       "      <td>12.02.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>32765246</td>\n",
       "      <td>13/01/2021</td>\n",
       "      <td>5411</td>\n",
       "      <td>76.00</td>\n",
       "      <td>2</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>34.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Volgograd</td>\n",
       "      <td>24.09.2015</td>\n",
       "      <td>14.10.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>720653</td>\n",
       "      <td>15/06/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>178.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>20.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Saint-Petersburg</td>\n",
       "      <td>12.01.2018</td>\n",
       "      <td>05.10.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>30372141</td>\n",
       "      <td>23/03/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>65.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>57.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Saint-Petersburg</td>\n",
       "      <td>15.03.2016</td>\n",
       "      <td>06.04.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>40745579</td>\n",
       "      <td>13/09/2021</td>\n",
       "      <td>5691</td>\n",
       "      <td>4999.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Men's and Women's Clothing Stores</td>\n",
       "      <td>26.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Krasnogorsk</td>\n",
       "      <td>27.07.2016</td>\n",
       "      <td>16.01.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4649444</td>\n",
       "      <td>20/02/2021</td>\n",
       "      <td>5651</td>\n",
       "      <td>-8250.00</td>\n",
       "      <td>-1</td>\n",
       "      <td>Family Clothing Stores</td>\n",
       "      <td>41.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>13.11.2014</td>\n",
       "      <td>03.12.2017</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>35583273</td>\n",
       "      <td>17/10/2020</td>\n",
       "      <td>5912</td>\n",
       "      <td>109.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Drug Stores and Pharmacies</td>\n",
       "      <td>45.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Novosibirsk</td>\n",
       "      <td>30.06.2015</td>\n",
       "      <td>03.11.2020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>6428603</td>\n",
       "      <td>06/11/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>974.38</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>38.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Samara</td>\n",
       "      <td>05.08.2013</td>\n",
       "      <td>25.03.2014</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>41593866</td>\n",
       "      <td>08/07/2021</td>\n",
       "      <td>5814</td>\n",
       "      <td>744.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Quick Payment Service-Fast Food Restaurants</td>\n",
       "      <td>28.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Krasnogorsk</td>\n",
       "      <td>26.11.2018</td>\n",
       "      <td>16.09.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>48494637</td>\n",
       "      <td>07/02/2021</td>\n",
       "      <td>5462</td>\n",
       "      <td>23.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Bakeries</td>\n",
       "      <td>28.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Samara</td>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>17.04.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>29944928</td>\n",
       "      <td>20/03/2021</td>\n",
       "      <td>5921</td>\n",
       "      <td>299.90</td>\n",
       "      <td>1</td>\n",
       "      <td>Package Stores--Beer, Wine, and Liquor</td>\n",
       "      <td>43.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Voronezh</td>\n",
       "      <td>13.08.2013</td>\n",
       "      <td>24.08.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>35319399</td>\n",
       "      <td>12/07/2020</td>\n",
       "      <td>5921</td>\n",
       "      <td>9.90</td>\n",
       "      <td>1</td>\n",
       "      <td>Package Stores--Beer, Wine, and Liquor</td>\n",
       "      <td>23.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>27.11.2019</td>\n",
       "      <td>02.07.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>42356205</td>\n",
       "      <td>06/08/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>252.00</td>\n",
       "      <td>2</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>37.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>09.10.2017</td>\n",
       "      <td>24.08.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>16401866</td>\n",
       "      <td>22/09/2021</td>\n",
       "      <td>5541</td>\n",
       "      <td>1713.68</td>\n",
       "      <td>1</td>\n",
       "      <td>Service Stations (with or without Ancillary Se...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Ekaterinburg</td>\n",
       "      <td>17.03.2019</td>\n",
       "      <td>12.08.2020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>21334641</td>\n",
       "      <td>02/04/2020</td>\n",
       "      <td>5921</td>\n",
       "      <td>216.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Package Stores--Beer, Wine, and Liquor</td>\n",
       "      <td>30.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Kazan</td>\n",
       "      <td>14.03.2017</td>\n",
       "      <td>08.06.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32145606</td>\n",
       "      <td>16/01/2020</td>\n",
       "      <td>5331</td>\n",
       "      <td>275.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Variety Stores</td>\n",
       "      <td>55.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Krasnogorsk</td>\n",
       "      <td>14.08.2014</td>\n",
       "      <td>16.01.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>20065940</td>\n",
       "      <td>06/10/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>273.31</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>41.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>13.12.2016</td>\n",
       "      <td>13.01.2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>5973923</td>\n",
       "      <td>02/02/2021</td>\n",
       "      <td>5411</td>\n",
       "      <td>932.68</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>54.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Omsk</td>\n",
       "      <td>28.05.2019</td>\n",
       "      <td>21.06.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>15398357</td>\n",
       "      <td>23/06/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>1557.79</td>\n",
       "      <td>2</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>79.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Sevastopol</td>\n",
       "      <td>03.10.2018</td>\n",
       "      <td>04.09.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>9210188</td>\n",
       "      <td>20/05/2020</td>\n",
       "      <td>5812</td>\n",
       "      <td>1094.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Eating Places and Restaurants</td>\n",
       "      <td>21.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Volgograd</td>\n",
       "      <td>12.11.2019</td>\n",
       "      <td>28.06.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>8628705</td>\n",
       "      <td>09/06/2020</td>\n",
       "      <td>5818</td>\n",
       "      <td>75.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Large Digital Goods Merchant</td>\n",
       "      <td>30.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>29.02.2020</td>\n",
       "      <td>27.04.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>17304347</td>\n",
       "      <td>28/07/2021</td>\n",
       "      <td>5411</td>\n",
       "      <td>1978.97</td>\n",
       "      <td>1</td>\n",
       "      <td>Grocery Stores and Supermarkets</td>\n",
       "      <td>46.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Ufa</td>\n",
       "      <td>10.04.2019</td>\n",
       "      <td>21.05.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>18450688</td>\n",
       "      <td>18/06/2021</td>\n",
       "      <td>5921</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>Package Stores--Beer, Wine, and Liquor</td>\n",
       "      <td>40.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Omsk</td>\n",
       "      <td>06.07.2013</td>\n",
       "      <td>24.04.2014</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>31948681</td>\n",
       "      <td>12/08/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>142.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>38.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Omsk</td>\n",
       "      <td>17.11.2018</td>\n",
       "      <td>01.02.2020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>38973768</td>\n",
       "      <td>04/01/2021</td>\n",
       "      <td>5912</td>\n",
       "      <td>173.40</td>\n",
       "      <td>1</td>\n",
       "      <td>Drug Stores and Pharmacies</td>\n",
       "      <td>72.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Saint-Petersburg</td>\n",
       "      <td>15.07.2016</td>\n",
       "      <td>10.10.2016</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>21193162</td>\n",
       "      <td>03/09/2021</td>\n",
       "      <td>5999</td>\n",
       "      <td>160.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous &amp; Specialty Retail Stores</td>\n",
       "      <td>31.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Ekaterinburg</td>\n",
       "      <td>07.09.2017</td>\n",
       "      <td>07.05.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>28409328</td>\n",
       "      <td>06/10/2021</td>\n",
       "      <td>5311</td>\n",
       "      <td>110.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Department Stores</td>\n",
       "      <td>53.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Sevastopol</td>\n",
       "      <td>11.12.2012</td>\n",
       "      <td>17.07.2013</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>22409263</td>\n",
       "      <td>30/03/2021</td>\n",
       "      <td>5921</td>\n",
       "      <td>279.98</td>\n",
       "      <td>1</td>\n",
       "      <td>Package Stores--Beer, Wine, and Liquor</td>\n",
       "      <td>42.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Voronezh</td>\n",
       "      <td>16.01.2014</td>\n",
       "      <td>11.07.2014</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>26719608</td>\n",
       "      <td>09/04/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>117.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Miscellaneous Food Stores-Convenience Stores a...</td>\n",
       "      <td>64.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Samara</td>\n",
       "      <td>25.11.2013</td>\n",
       "      <td>19.04.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>27133536</td>\n",
       "      <td>14/03/2021</td>\n",
       "      <td>5541</td>\n",
       "      <td>-4413.86</td>\n",
       "      <td>-1</td>\n",
       "      <td>Service Stations (with or without Ancillary Se...</td>\n",
       "      <td>38.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>17.08.2017</td>\n",
       "      <td>16.01.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>11982603</td>\n",
       "      <td>31/10/2020</td>\n",
       "      <td>5541</td>\n",
       "      <td>163.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Service Stations (with or without Ancillary Se...</td>\n",
       "      <td>22.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Sevastopol</td>\n",
       "      <td>08.04.2018</td>\n",
       "      <td>12.07.2018</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>50362611</td>\n",
       "      <td>21/04/2020</td>\n",
       "      <td>5211</td>\n",
       "      <td>18.90</td>\n",
       "      <td>1</td>\n",
       "      <td>Lumber &amp; Building Materials Stores</td>\n",
       "      <td>70.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Kaliningrad</td>\n",
       "      <td>04.12.2018</td>\n",
       "      <td>22.08.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>16507637</td>\n",
       "      <td>14/12/2020</td>\n",
       "      <td>5912</td>\n",
       "      <td>338.50</td>\n",
       "      <td>1</td>\n",
       "      <td>Drug Stores and Pharmacies</td>\n",
       "      <td>22.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>04.03.2016</td>\n",
       "      <td>12.10.2018</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        uid1    date_pur mcc_id  transaction_amt  transaction_qty  \\\n",
       "0   14164181  10/09/2020   5499           418.00                1   \n",
       "1   15453249  10/08/2020   5541          1034.00                1   \n",
       "2   41571339  12/09/2020   5411            57.98                1   \n",
       "3    2044223  28/06/2021   5921           549.40                4   \n",
       "4   33493259  20/07/2020   4121           578.00                2   \n",
       "5   41598283  03/07/2021   5411           175.63                1   \n",
       "6    6379644  26/07/2020   5211           122.00                1   \n",
       "7   19107233  15/06/2021   5411           842.23                2   \n",
       "8   45462850  23/06/2021   5815             0.00                0   \n",
       "9   13970717  22/09/2020   5541          1360.18                1   \n",
       "10  46277961  02/09/2021   5722          2642.00                1   \n",
       "11  45428083  06/03/2021   5211          2966.00                1   \n",
       "12  18211347  09/04/2021   5499           433.00                2   \n",
       "13  23578498  16/04/2020   5411            79.90                1   \n",
       "14  20701909  09/12/2020   5499           618.46                1   \n",
       "15  37923687  22/01/2021   5411          -449.00               -2   \n",
       "16  11080292  24/06/2021   5411          1626.98                2   \n",
       "17  51166049  18/04/2020   5411          2045.33                3   \n",
       "18  32765246  13/01/2021   5411            76.00                2   \n",
       "19    720653  15/06/2021   5499           178.00                1   \n",
       "20  30372141  23/03/2021   5499            65.00                1   \n",
       "21  40745579  13/09/2021   5691          4999.00                1   \n",
       "22   4649444  20/02/2021   5651         -8250.00               -1   \n",
       "23  35583273  17/10/2020   5912           109.00                1   \n",
       "24   6428603  06/11/2020   5411           974.38                1   \n",
       "25  41593866  08/07/2021   5814           744.00                1   \n",
       "26  48494637  07/02/2021   5462            23.00                1   \n",
       "27  29944928  20/03/2021   5921           299.90                1   \n",
       "28  35319399  12/07/2020   5921             9.90                1   \n",
       "29  42356205  06/08/2021   5499           252.00                2   \n",
       "30  16401866  22/09/2021   5541          1713.68                1   \n",
       "31  21334641  02/04/2020   5921           216.00                1   \n",
       "32  32145606  16/01/2020   5331           275.00                1   \n",
       "33  20065940  06/10/2020   5411           273.31                1   \n",
       "34   5973923  02/02/2021   5411           932.68                1   \n",
       "35  15398357  23/06/2020   5411          1557.79                2   \n",
       "36   9210188  20/05/2020   5812          1094.00                1   \n",
       "37   8628705  09/06/2020   5818            75.00                1   \n",
       "38  17304347  28/07/2021   5411          1978.97                1   \n",
       "39  18450688  18/06/2021   5921             0.00                0   \n",
       "40  31948681  12/08/2021   5499           142.00                1   \n",
       "41  38973768  04/01/2021   5912           173.40                1   \n",
       "42  21193162  03/09/2021   5999           160.00                1   \n",
       "43  28409328  06/10/2021   5311           110.00                1   \n",
       "44  22409263  30/03/2021   5921           279.98                1   \n",
       "45  26719608  09/04/2021   5499           117.00                1   \n",
       "46  27133536  14/03/2021   5541         -4413.86               -1   \n",
       "47  11982603  31/10/2020   5541           163.00                1   \n",
       "48  50362611  21/04/2020   5211            18.90                1   \n",
       "49  16507637  14/12/2020   5912           338.50                1   \n",
       "\n",
       "                                         program_type  customer_age country  \\\n",
       "0   Miscellaneous Food Stores-Convenience Stores a...          50.0  RUSSIA   \n",
       "1   Service Stations (with or without Ancillary Se...          63.0  RUSSIA   \n",
       "2                     Grocery Stores and Supermarkets          22.0  RUSSIA   \n",
       "3              Package Stores--Beer, Wine, and Liquor          33.0  RUSSIA   \n",
       "4                             Taxicabs and Limousines          24.0  RUSSIA   \n",
       "5                     Grocery Stores and Supermarkets          62.0  RUSSIA   \n",
       "6                  Lumber & Building Materials Stores          47.0  RUSSIA   \n",
       "7                     Grocery Stores and Supermarkets          42.0  RUSSIA   \n",
       "8       Digital Goods – Media, Books, Movies, Music            45.0  RUSSIA   \n",
       "9   Service Stations (with or without Ancillary Se...          45.0  RUSSIA   \n",
       "10                         Household Appliance Stores          43.0  RUSSIA   \n",
       "11                 Lumber & Building Materials Stores          35.0  RUSSIA   \n",
       "12  Miscellaneous Food Stores-Convenience Stores a...          43.0  RUSSIA   \n",
       "13                    Grocery Stores and Supermarkets          60.0  RUSSIA   \n",
       "14  Miscellaneous Food Stores-Convenience Stores a...          57.0  RUSSIA   \n",
       "15                    Grocery Stores and Supermarkets          31.0  RUSSIA   \n",
       "16                    Grocery Stores and Supermarkets          37.0  RUSSIA   \n",
       "17                    Grocery Stores and Supermarkets          47.0  RUSSIA   \n",
       "18                    Grocery Stores and Supermarkets          34.0  RUSSIA   \n",
       "19  Miscellaneous Food Stores-Convenience Stores a...          20.0  RUSSIA   \n",
       "20  Miscellaneous Food Stores-Convenience Stores a...          57.0  RUSSIA   \n",
       "21                  Men's and Women's Clothing Stores          26.0  RUSSIA   \n",
       "22                             Family Clothing Stores          41.0  RUSSIA   \n",
       "23                         Drug Stores and Pharmacies          45.0  RUSSIA   \n",
       "24                    Grocery Stores and Supermarkets          38.0  RUSSIA   \n",
       "25        Quick Payment Service-Fast Food Restaurants          28.0  RUSSIA   \n",
       "26                                           Bakeries          28.0  RUSSIA   \n",
       "27             Package Stores--Beer, Wine, and Liquor          43.0  RUSSIA   \n",
       "28             Package Stores--Beer, Wine, and Liquor          23.0  RUSSIA   \n",
       "29  Miscellaneous Food Stores-Convenience Stores a...          37.0  RUSSIA   \n",
       "30  Service Stations (with or without Ancillary Se...          60.0  RUSSIA   \n",
       "31             Package Stores--Beer, Wine, and Liquor          30.0  RUSSIA   \n",
       "32                                     Variety Stores          55.0  RUSSIA   \n",
       "33                    Grocery Stores and Supermarkets          41.0  RUSSIA   \n",
       "34                    Grocery Stores and Supermarkets          54.0  RUSSIA   \n",
       "35                    Grocery Stores and Supermarkets          79.0  RUSSIA   \n",
       "36                      Eating Places and Restaurants          21.0  RUSSIA   \n",
       "37                     Large Digital Goods Merchant            30.0  RUSSIA   \n",
       "38                    Grocery Stores and Supermarkets          46.0  RUSSIA   \n",
       "39             Package Stores--Beer, Wine, and Liquor          40.0  RUSSIA   \n",
       "40  Miscellaneous Food Stores-Convenience Stores a...          38.0  RUSSIA   \n",
       "41                         Drug Stores and Pharmacies          72.0  RUSSIA   \n",
       "42            Miscellaneous & Specialty Retail Stores          31.0  RUSSIA   \n",
       "43                                  Department Stores          53.0  RUSSIA   \n",
       "44             Package Stores--Beer, Wine, and Liquor          42.0  RUSSIA   \n",
       "45  Miscellaneous Food Stores-Convenience Stores a...          64.0  RUSSIA   \n",
       "46  Service Stations (with or without Ancillary Se...          38.0  RUSSIA   \n",
       "47  Service Stations (with or without Ancillary Se...          22.0  RUSSIA   \n",
       "48                 Lumber & Building Materials Stores          70.0  RUSSIA   \n",
       "49                         Drug Stores and Pharmacies          22.0  RUSSIA   \n",
       "\n",
       "      city_of_living registration_dt website_last_visit_date  email  \\\n",
       "0             Samara      05.12.2017              14.12.2019    1.0   \n",
       "1               Perm      07.11.2017              08.05.2019    0.0   \n",
       "2       Novokuznetsk      13.11.2019              06.09.2020    0.0   \n",
       "3           Voronezh      13.10.2018              08.05.2020    0.0   \n",
       "4           Voronezh      30.09.2016              27.07.2018    1.0   \n",
       "5        Kaliningrad      20.04.2016              10.10.2020    0.0   \n",
       "6       Novokuznetsk      16.07.2020              05.02.2021    0.0   \n",
       "7                Ufa      21.01.2017              17.09.2019    0.0   \n",
       "8              Tomsk      17.12.2013              11.04.2015    0.0   \n",
       "9   Saint-Petersburg      26.08.2014              07.12.2020    0.0   \n",
       "10          Voronezh      22.01.2017              11.06.2020    0.0   \n",
       "11            Moscow      04.10.2017              06.03.2019    0.0   \n",
       "12            Moscow      29.09.2016              03.03.2020    0.0   \n",
       "13       Krasnogorsk      07.07.2017              15.06.2020    0.0   \n",
       "14            Moscow      27.12.2016              30.12.2019    0.0   \n",
       "15            Samara      28.10.2017              20.11.2017    1.0   \n",
       "16       Vladivostok      25.10.2015              25.05.2019    0.0   \n",
       "17           Pushkin      19.10.2019              12.02.2021    0.0   \n",
       "18         Volgograd      24.09.2015              14.10.2019    0.0   \n",
       "19  Saint-Petersburg      12.01.2018              05.10.2021    0.0   \n",
       "20  Saint-Petersburg      15.03.2016              06.04.2020    0.0   \n",
       "21       Krasnogorsk      27.07.2016              16.01.2020    0.0   \n",
       "22      Novokuznetsk      13.11.2014              03.12.2017    1.0   \n",
       "23       Novosibirsk      30.06.2015              03.11.2020    1.0   \n",
       "24            Samara      05.08.2013              25.03.2014    1.0   \n",
       "25       Krasnogorsk      26.11.2018              16.09.2019    0.0   \n",
       "26            Samara      14.03.2020              17.04.2021    0.0   \n",
       "27          Voronezh      13.08.2013              24.08.2020    0.0   \n",
       "28            Moscow      27.11.2019              02.07.2020    0.0   \n",
       "29            Moscow      09.10.2017              24.08.2021    0.0   \n",
       "30      Ekaterinburg      17.03.2019              12.08.2020    1.0   \n",
       "31             Kazan      14.03.2017              08.06.2019    0.0   \n",
       "32       Krasnogorsk      14.08.2014              16.01.2020    0.0   \n",
       "33            Moscow      13.12.2016              13.01.2017    0.0   \n",
       "34              Omsk      28.05.2019              21.06.2020    0.0   \n",
       "35        Sevastopol      03.10.2018              04.09.2021    0.0   \n",
       "36         Volgograd      12.11.2019              28.06.2021    0.0   \n",
       "37            Moscow      29.02.2020              27.04.2021    0.0   \n",
       "38               Ufa      10.04.2019              21.05.2020    0.0   \n",
       "39              Omsk      06.07.2013              24.04.2014    0.0   \n",
       "40              Omsk      17.11.2018              01.02.2020    1.0   \n",
       "41  Saint-Petersburg      15.07.2016              10.10.2016    0.0   \n",
       "42      Ekaterinburg      07.09.2017              07.05.2020    0.0   \n",
       "43        Sevastopol      11.12.2012              17.07.2013    1.0   \n",
       "44          Voronezh      16.01.2014              11.07.2014    1.0   \n",
       "45            Samara      25.11.2013              19.04.2021    0.0   \n",
       "46      Novokuznetsk      17.08.2017              16.01.2021    0.0   \n",
       "47        Sevastopol      08.04.2018              12.07.2018    0.0   \n",
       "48       Kaliningrad      04.12.2018              22.08.2020    0.0   \n",
       "49         Krasnodar      04.03.2016              12.10.2018    0.0   \n",
       "\n",
       "    has_mob_app  phone_number  push  \n",
       "0           1.0           1.0   1.0  \n",
       "1           0.0           1.0   0.0  \n",
       "2           1.0           1.0   1.0  \n",
       "3           0.0           1.0   0.0  \n",
       "4           0.0           1.0   0.0  \n",
       "5           0.0           1.0   0.0  \n",
       "6           1.0           1.0   1.0  \n",
       "7           0.0           1.0   0.0  \n",
       "8           0.0           1.0   0.0  \n",
       "9           1.0           1.0   0.0  \n",
       "10          0.0           1.0   0.0  \n",
       "11          0.0           1.0   0.0  \n",
       "12          0.0           1.0   0.0  \n",
       "13          0.0           1.0   0.0  \n",
       "14          0.0           1.0   0.0  \n",
       "15          1.0           1.0   1.0  \n",
       "16          0.0           1.0   0.0  \n",
       "17          0.0           1.0   0.0  \n",
       "18          0.0           1.0   0.0  \n",
       "19          1.0           1.0   1.0  \n",
       "20          0.0           1.0   0.0  \n",
       "21          0.0           1.0   0.0  \n",
       "22          1.0           1.0   0.0  \n",
       "23          0.0           1.0   0.0  \n",
       "24          1.0           1.0   1.0  \n",
       "25          0.0           1.0   0.0  \n",
       "26          1.0           1.0   1.0  \n",
       "27          0.0           1.0   0.0  \n",
       "28          1.0           1.0   1.0  \n",
       "29          0.0           1.0   0.0  \n",
       "30          0.0           1.0   0.0  \n",
       "31          1.0           1.0   0.0  \n",
       "32          1.0           1.0   1.0  \n",
       "33          0.0           1.0   0.0  \n",
       "34          0.0           1.0   0.0  \n",
       "35          0.0           1.0   0.0  \n",
       "36          0.0           1.0   0.0  \n",
       "37          1.0           1.0   1.0  \n",
       "38          0.0           1.0   0.0  \n",
       "39          0.0           1.0   0.0  \n",
       "40          1.0           1.0   1.0  \n",
       "41          0.0           1.0   0.0  \n",
       "42          1.0           1.0   0.0  \n",
       "43          0.0           1.0   0.0  \n",
       "44          0.0           1.0   0.0  \n",
       "45          0.0           1.0   0.0  \n",
       "46          0.0           1.0   0.0  \n",
       "47          0.0           1.0   0.0  \n",
       "48          0.0           1.0   0.0  \n",
       "49          1.0           1.0   1.0  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bd2742f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data.corr(method='pearson'),annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "294ba99e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "\n",
    "import plotly.graph_objects as go"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6feae415",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b2c9db38",
   "metadata": {},
   "outputs": [],
   "source": [
    "le = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8cf6c7f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "data2['program_type'] = le.fit_transform(data2['program_type'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "33f7047d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data2['city_of_living'] = le.fit_transform(data2['city_of_living'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6cfc9e9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uid1                           0\n",
       "date_pur                       0\n",
       "mcc_id                         0\n",
       "transaction_amt                0\n",
       "transaction_qty                0\n",
       "program_type                   0\n",
       "customer_age               30328\n",
       "country                    30328\n",
       "city_of_living                 0\n",
       "registration_dt            30328\n",
       "website_last_visit_date    30328\n",
       "email                      30328\n",
       "has_mob_app                30328\n",
       "phone_number               30328\n",
       "push                       30328\n",
       "dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "bfb05c84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575, 15)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b99df295",
   "metadata": {},
   "outputs": [],
   "source": [
    "data2 = data2.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2fff873a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data2[['transaction_amt','customer_age','city_of_living','has_mob_app']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "80b7225a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Elbow Method For Optimal k')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Implemeting Elbow Method to Determine Optimal Clusters\n",
    "\n",
    "Sum_of_squared_distances = []\n",
    "clus_range = range(1,12)\n",
    "for k in clus_range:\n",
    "    km = KMeans(n_clusters=k)\n",
    "    km = km.fit(X)\n",
    "    Sum_of_squared_distances.append(km.inertia_)\n",
    "plt.plot(clus_range, Sum_of_squared_distances)\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Sum_of_squared_distances')\n",
    "plt.title('Elbow Method For Optimal k') #Showing 3 as optimal Clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3916d520",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "kmean = KMeans(n_clusters =2,init='k-means++',random_state=2,algorithm='full')\n",
    "\n",
    "kmean.fit(X)\n",
    "\n",
    "clus=  kmean.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "654ef6c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[7.61225686e+02 3.96799339e+01 9.91530436e+00 3.51078227e-01]\n",
      " [5.38451200e+06 6.20000000e+01 0.00000000e+00 0.00000000e+00]]\n"
     ]
    }
   ],
   "source": [
    "#Showing Centroids\n",
    "\n",
    "cent = kmean.cluster_centers_\n",
    "\n",
    "\n",
    "print(cent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1f61924d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='count'>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=clus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "09e353d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['uid1', 'date_pur', 'mcc_id', 'transaction_amt', 'transaction_qty',\n",
       "       'program_type', 'customer_age', 'country', 'city_of_living',\n",
       "       'registration_dt', 'website_last_visit_date', 'email', 'has_mob_app',\n",
       "       'phone_number', 'push'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b239a458",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['transaction_amt'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4dc4c6fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['transaction_qty'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "bbefb5be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data2['customer_age'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "9856abd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "data2['city_of_living'] = le.inverse_transform(data2['city_of_living'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "773e62b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "moscow = data2.loc[data2['city_of_living']=='Moscow']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7e8136b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid1</th>\n",
       "      <th>date_pur</th>\n",
       "      <th>mcc_id</th>\n",
       "      <th>transaction_amt</th>\n",
       "      <th>transaction_qty</th>\n",
       "      <th>program_type</th>\n",
       "      <th>customer_age</th>\n",
       "      <th>country</th>\n",
       "      <th>city_of_living</th>\n",
       "      <th>registration_dt</th>\n",
       "      <th>website_last_visit_date</th>\n",
       "      <th>email</th>\n",
       "      <th>has_mob_app</th>\n",
       "      <th>phone_number</th>\n",
       "      <th>push</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>45428083</td>\n",
       "      <td>06/03/2021</td>\n",
       "      <td>5211</td>\n",
       "      <td>2966.00</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>35.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>04.10.2017</td>\n",
       "      <td>06.03.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>18211347</td>\n",
       "      <td>09/04/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>433.00</td>\n",
       "      <td>2</td>\n",
       "      <td>178</td>\n",
       "      <td>43.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>29.09.2016</td>\n",
       "      <td>03.03.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>20701909</td>\n",
       "      <td>09/12/2020</td>\n",
       "      <td>5499</td>\n",
       "      <td>618.46</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>57.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>27.12.2016</td>\n",
       "      <td>30.12.2019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>35319399</td>\n",
       "      <td>12/07/2020</td>\n",
       "      <td>5921</td>\n",
       "      <td>9.90</td>\n",
       "      <td>1</td>\n",
       "      <td>202</td>\n",
       "      <td>23.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>27.11.2019</td>\n",
       "      <td>02.07.2020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>42356205</td>\n",
       "      <td>06/08/2021</td>\n",
       "      <td>5499</td>\n",
       "      <td>252.00</td>\n",
       "      <td>2</td>\n",
       "      <td>178</td>\n",
       "      <td>37.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>09.10.2017</td>\n",
       "      <td>24.08.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048546</th>\n",
       "      <td>31909673</td>\n",
       "      <td>18/07/2021</td>\n",
       "      <td>5977</td>\n",
       "      <td>171.90</td>\n",
       "      <td>1</td>\n",
       "      <td>73</td>\n",
       "      <td>17.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>30.03.2021</td>\n",
       "      <td>30.08.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048548</th>\n",
       "      <td>19511718</td>\n",
       "      <td>02/03/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>590.00</td>\n",
       "      <td>1</td>\n",
       "      <td>134</td>\n",
       "      <td>68.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>04.02.2016</td>\n",
       "      <td>21.12.2017</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048549</th>\n",
       "      <td>13062850</td>\n",
       "      <td>24/06/2021</td>\n",
       "      <td>4121</td>\n",
       "      <td>187.00</td>\n",
       "      <td>1</td>\n",
       "      <td>252</td>\n",
       "      <td>35.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>10.12.2013</td>\n",
       "      <td>17.02.2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048557</th>\n",
       "      <td>49520526</td>\n",
       "      <td>31/08/2021</td>\n",
       "      <td>4131</td>\n",
       "      <td>42.00</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>42.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>16.02.2013</td>\n",
       "      <td>09.02.2018</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048558</th>\n",
       "      <td>30416916</td>\n",
       "      <td>22/03/2020</td>\n",
       "      <td>5411</td>\n",
       "      <td>2300.73</td>\n",
       "      <td>1</td>\n",
       "      <td>134</td>\n",
       "      <td>50.0</td>\n",
       "      <td>RUSSIA</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>24.06.2013</td>\n",
       "      <td>19.01.2015</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>123711 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             uid1    date_pur mcc_id  transaction_amt  transaction_qty  \\\n",
       "11       45428083  06/03/2021   5211          2966.00                1   \n",
       "12       18211347  09/04/2021   5499           433.00                2   \n",
       "14       20701909  09/12/2020   5499           618.46                1   \n",
       "28       35319399  12/07/2020   5921             9.90                1   \n",
       "29       42356205  06/08/2021   5499           252.00                2   \n",
       "...           ...         ...    ...              ...              ...   \n",
       "1048546  31909673  18/07/2021   5977           171.90                1   \n",
       "1048548  19511718  02/03/2020   5411           590.00                1   \n",
       "1048549  13062850  24/06/2021   4121           187.00                1   \n",
       "1048557  49520526  31/08/2021   4131            42.00                1   \n",
       "1048558  30416916  22/03/2020   5411          2300.73                1   \n",
       "\n",
       "         program_type  customer_age country city_of_living registration_dt  \\\n",
       "11                163          35.0  RUSSIA         Moscow      04.10.2017   \n",
       "12                178          43.0  RUSSIA         Moscow      29.09.2016   \n",
       "14                178          57.0  RUSSIA         Moscow      27.12.2016   \n",
       "28                202          23.0  RUSSIA         Moscow      27.11.2019   \n",
       "29                178          37.0  RUSSIA         Moscow      09.10.2017   \n",
       "...               ...           ...     ...            ...             ...   \n",
       "1048546            73          17.0  RUSSIA         Moscow      30.03.2021   \n",
       "1048548           134          68.0  RUSSIA         Moscow      04.02.2016   \n",
       "1048549           252          35.0  RUSSIA         Moscow      10.12.2013   \n",
       "1048557            34          42.0  RUSSIA         Moscow      16.02.2013   \n",
       "1048558           134          50.0  RUSSIA         Moscow      24.06.2013   \n",
       "\n",
       "        website_last_visit_date  email  has_mob_app  phone_number  push  \n",
       "11                   06.03.2019    0.0          0.0           1.0   0.0  \n",
       "12                   03.03.2020    0.0          0.0           1.0   0.0  \n",
       "14                   30.12.2019    0.0          0.0           1.0   0.0  \n",
       "28                   02.07.2020    0.0          1.0           1.0   1.0  \n",
       "29                   24.08.2021    0.0          0.0           1.0   0.0  \n",
       "...                         ...    ...          ...           ...   ...  \n",
       "1048546              30.08.2021    0.0          0.0           1.0   0.0  \n",
       "1048548              21.12.2017    1.0          1.0           1.0   0.0  \n",
       "1048549              17.02.2021    0.0          0.0           1.0   0.0  \n",
       "1048557              09.02.2018    0.0          0.0           1.0   0.0  \n",
       "1048558              19.01.2015    1.0          1.0           1.0   0.0  \n",
       "\n",
       "[123711 rows x 15 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "moscow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "eb38e121",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data2['city_of_living'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "2c59e667",
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_city = data2['city_of_living'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "3cc40fa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Samara', 'Perm', 'Novokuznetsk', 'Voronezh', 'Kaliningrad', 'Ufa',\n",
       "       'Tomsk', 'Saint-Petersburg', 'Moscow', 'Krasnogorsk',\n",
       "       'Vladivostok', 'Pushkin', 'Volgograd', 'Novosibirsk',\n",
       "       'Ekaterinburg', 'Kazan', 'Omsk', 'Sevastopol', 'Krasnodar',\n",
       "       'Odintsovo', 'Obninsk'], dtype=object)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_city"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2cf15ebc",
   "metadata": {},
   "outputs": [],
   "source": [
    "saint_petersburg = data2.loc[data2['city_of_living']=='Saint-Petersburg']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "fc118de7",
   "metadata": {},
   "outputs": [],
   "source": [
    "perm = data2.loc[data2['city_of_living']=='Perm']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2714dae9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100007393.38"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "moscow['transaction_amt'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "3f99b0bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "808.395319575453"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "moscow['transaction_amt'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "a1304d1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30677914.059999995"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "saint_petersburg['transaction_amt'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ad3dda4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "679.9333775127982"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "saint_petersburg['transaction_amt'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "2b331060",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35662231.82341071"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(moscow['transaction_amt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "39d90be5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24501157.181566257"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(saint_petersburg['transaction_amt'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "760a5008",
   "metadata": {},
   "source": [
    "## First Hypothesis Mean amount of transaction in Moscow is Higher than Saint Petersburg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "1c49b12b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P Value: 8.381576429765882e-06\n",
      "We reject the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats as st\n",
    "alpha = 0.05\n",
    "result = st.ttest_ind(moscow['transaction_amt'],saint_petersburg['transaction_amt'],equal_var=False)\n",
    "print(\"P Value:\",result.pvalue)\n",
    "if (result.pvalue < alpha):\n",
    "    print(\"We reject the null hypothesis\")\n",
    "else:\n",
    "    print(\"We cannot reject null hypothesis\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "63e1b041",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data2['customer_age'].hist(bins=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "5e55afa4",
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_30 = data2.loc[data2['customer_age']<=30]\n",
    "cust50 = data2.loc[(data2['customer_age']>30) & (data2['customer_age']<=50)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a31a881",
   "metadata": {},
   "source": [
    "## Mean transaction amount of customers less than age 30 is less than mean transaction amount of customers between 30 to 50 age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "12497809",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "533.4797557755057"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_30['transaction_amt'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "4bd1fbb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "865.0750093798506"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust50['transaction_amt'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "34689338",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4005602.1457699267"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(cust_30['transaction_amt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "12f6d7c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27059928.572510306"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(cust50['transaction_amt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "6e4b01b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P Value: 0.0\n",
      "We reject the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats as st\n",
    "alpha = 0.05\n",
    "result = st.ttest_ind(cust_30['transaction_amt'],cust50['transaction_amt'],equal_var=False)\n",
    "print(\"P Value:\",result.pvalue)\n",
    "if (result.pvalue < alpha):\n",
    "    print(\"We reject the null hypothesis\")\n",
    "else:\n",
    "    print(\"We cannot reject null hypothesis\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8432c634",
   "metadata": {},
   "source": [
    "## mean transaction amount of customers who have mobile app is higher than mean transaction amount without mobile app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "0227d4eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_app = data2.loc[data2['has_mob_app']==1.0]\n",
    "cust_no_app = data2.loc[data2['has_mob_app']==0.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "016dd5d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "788.0462150194317"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_app['transaction_amt'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "8ba804fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "754.8631034426517"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_no_app['transaction_amt'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "5f2eecbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22555869.676442374"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(cust_app['transaction_amt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "d6c5a0dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "66517924.412779644"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(cust_no_app['transaction_amt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "77fc6cbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P Value: 0.009513712635960507\n",
      "We reject the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats as st\n",
    "alpha = 0.05\n",
    "result = st.ttest_ind(cust_app['transaction_amt'],cust_no_app['transaction_amt'],equal_var=False)\n",
    "print(\"P Value:\",result.pvalue)\n",
    "if (result.pvalue < alpha):\n",
    "    print(\"We reject the null hypothesis\")\n",
    "else:\n",
    "    print(\"We cannot reject null hypothesis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "bbebcf3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data2['city_of_living'] = le.fit_transform(data2['city_of_living'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "11ddc9a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['uid1', 'date_pur', 'mcc_id', 'transaction_amt', 'transaction_qty',\n",
       "       'program_type', 'customer_age', 'country', 'city_of_living',\n",
       "       'registration_dt', 'website_last_visit_date', 'email', 'has_mob_app',\n",
       "       'phone_number', 'push'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "71143511",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data2[['transaction_amt','transaction_qty','program_type','customer_age','city_of_living','has_mob_app',\n",
    "           'phone_number','push']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "d585fbf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1018247"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d1b0bc8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "4be79247",
   "metadata": {},
   "outputs": [],
   "source": [
    "xtrain, xtrain = train_test_split(X,test_size=0.5,shuffle=True) ##Low computational Resources. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64f0148e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.cluster.hierarchy as sch\n",
    "\n",
    "# graph size\n",
    "plt.figure(1, figsize = (16 ,8))\n",
    "\n",
    "# creating the dendrogram\n",
    "dendrogram = sch.dendrogram(sch.linkage(xtrain, method  = \"ward\"))\n",
    "\n",
    "# ploting graphabs\n",
    "plt.title('Dendrogram')\n",
    "plt.xlabel('Customers')\n",
    "plt.ylabel('Euclidean distances')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c3d7c42",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import AgglomerativeClustering\n",
    "from yellowbrick.cluster import KElbowVisualizer\n",
    "model = AgglomerativeClustering()\n",
    "\n",
    "# k is range of number of clusters.\n",
    "visualizer = KElbowVisualizer(model, k=(2,30), timings=False)\n",
    "# Fit data to visualizer\n",
    "visualizer.fit(X)\n",
    "# Finalize and render figure\n",
    "visualizer.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ad3a548",
   "metadata": {},
   "source": [
    "### Kernel was crashing to perform Agglomerative clustering due to less computational power. We need GPU machine and it was also not possible in Google COlab. However if we split datasets into multiple parts then it can work. It is for our future play with the data."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
